"""Default description (change me)"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/files.ipynb.

# %% auto 0
__all__ = ['upsert_folder', 'read_md_from_disk', 'change_file_extension', 'save_to_disk']

# %% ../../nbs/utils/files.ipynb 2
import os
from frontmatter import Frontmatter
import shutil
import json

# %% ../../nbs/utils/files.ipynb 3
def upsert_folder(folder_path: str, debug_prn: bool = False, replace_folder=False):

    folder_path = os.path.dirname(folder_path)

    if replace_folder and os.path.exists(folder_path) and os.path.isdir(folder_path):
        folder_path = os.path.join(folder_path, "")
        shutil.rmtree(folder_path)

    if debug_prn:
        print(
            {
                "upsert_folder": os.path.abspath(folder_path),
                "is_exist": os.path.exists(folder_path),
            }
        )

    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

# %% ../../nbs/utils/files.ipynb 4
def read_md_from_disk(file_path):
    data = Frontmatter.read_file(file_path)

    return data["body"], data["attributes"]

# %% ../../nbs/utils/files.ipynb 5
def change_file_extension(file_path, extension):
    """Changes the file extension of a given file path to .json.

    Args:
        file_path: The path to the file.
    """
    if not extension.startswith('.'):
        extension = "." + extension

    base_name, _ = os.path.splitext(file_path)
    new_file_path = base_name + extension
    return os.rename(file_path, new_file_path)

# %% ../../nbs/utils/files.ipynb 6
def save_to_disk(
    output_path: str,
    data,
    is_binary: bool = False,
    encoding="utf-8",
    replace_folder=False,
):
    upsert_folder(output_path, replace_folder=replace_folder)

    # print(data, type(data))

    if isinstance(data, dict):
        output_path = change_file_extension(output_path, ".json")
        with open(output_path, "w") as f:
            return json.dump(data, f, indent=4)

    if is_binary or isinstance(data, bytes):
        try:
            json_path = change_file_extension(output_path, ".json")
            with open(json_path, "wb") as f:
                return f.write(json.dumps(data).encode("utf-8"))
        
        except:
            with open(output_path, "wb") as f:
                try:
                    return f.write(data)

                except Exception as e:
                    print(f"ðŸ’€ {e}")
                    raise e from e

    with open(output_path, "w", encoding=encoding) as f:
        return f.write(data)

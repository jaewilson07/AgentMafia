"""Default description (change me)"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/crawler.ipynb.

# %% auto 0
__all__ = ['default_browser_config', 'Crawler_Route_NotSuccess', 'scrape_url']

# %% ../../nbs/routes/crawler.ipynb 2
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode



# %% ../../nbs/routes/crawler.ipynb 3
from typing import Callable
from agent_mafia.client import MafiaError as amme

# %% ../../nbs/routes/crawler.ipynb 5
default_browser_config = BrowserConfig(
    browser_type="chromium",
    headless=True,
    verbose=True,
    extra_args=["--disable-gpu", "--disable-dev-shm-usage", "--no-sandbox"],
)

# %% ../../nbs/routes/crawler.ipynb 6
class Crawler_Route_NotSuccess(amme.MafiaError):
    def __init__(self, message, exception = None):
        super().__init__(message = message, exception = exception)

# %% ../../nbs/routes/crawler.ipynb 7
async def scrape_url(
    url: str,
    session_id: str,
    browser_config: BrowserConfig = None,
    storage_fn: Callable = None,
):

    browser_config = browser_config or default_browser_config

    res = None
    content = None

    try:
        async with AsyncWebCrawler(config=browser_config) as crawler:
            crawl_config = CrawlerRunConfig(cache_mode=CacheMode.BYPASS)

            res = await crawler.arun(
                url=url,
                config=crawl_config,
                session_id=session_id,
                timeout=15,
            )

    except NotImplementedError as e:
        raise Crawler_Route_NotSuccess(message = "have you run create4ai-create and create4ai-doctor? in terminal", exception = e)

    if not res.success:
        raise Crawler_Route_NotSuccess(message = f"error crawling {url} - {res.error_message}")

    if storage_fn:
        storage_fn(
            data = {
                'content' : res.markdown,
                'source' : session_id,
                'url' : url,})

    return res

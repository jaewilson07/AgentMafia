"""Default description (change me)"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/storage.ipynb.

# %% auto 0
__all__ = ['store_data_in_supabase_table', 'save_chunk_to_disk']

# %% ../../nbs/routes/storage.ipynb 2
from supabase import create_client
from supabase import Client as SupabaseClient


import agent_mafia.utils.files as amfi
import json
import datetime as dt

from ..client.ResponseGetData import ResponseGetDataSupabase

# %% ../../nbs/routes/storage.ipynb 5
def store_data_in_supabase_table(
    supabase_client: SupabaseClient,
    table_name : str,
    data: dict,
):
    """stores data into a supabase table"""
    res = (
        supabase_client.table(table_name)
        .upsert(data, on_conflict="url, chunk_number")
        .execute()
    )

    rgd = ResponseGetDataSupabase.from_res(res = res)

    return rgd

# %% ../../nbs/routes/storage.ipynb 7
def save_chunk_to_disk(
    output_path,
    data: dict,
    **kwargs,
):

    amfi.upsert_folder(output_path)

    url = data["url"]
    source = data["source"]
    content = data["content"]
    title = data.get("title")
    summary = data.get("summary")
    embedding = data.get("embedding")
    metadata = data.get("metadata")
    chunk_number = data.get("chunk_number")

    output_ls = [
        "---",
        f"url: {url}",
        f"session_id: {source}",
        f"chunk_number: {chunk_number}" if chunk_number is not None else None,
        f"title: {title}" if title is not None else None,
        f"summary: {summary}" if summary is not None else None,
        f"embedding: {embedding}" if embedding is not None else None,
        f"metadata : {json.dumps(metadata)}" if metadata is not None else None,
        f"updated_dt: {dt.datetime.now().isoformat()}",
        "---",
        content,
    ]

    with open(output_path, "w+", encoding="utf-8") as f:
        f.write("\n".join([row for row in output_ls if row is not None]))

        return True
